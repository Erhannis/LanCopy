/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.erhannis.lancopy;

import com.erhannis.mathnstuff.utils.ObservableMap.Change;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author erhannis
 */
public class Frame extends javax.swing.JFrame {
  private static class NodeLine {
    public final String id;
    public final String summary;

    public NodeLine(String id, String summary) {
      this.id = id;
      this.summary = summary;
    }

    @Override
    public String toString() {
      return id + " - " + summary;
    }
  }

  private final DataOwner dataOwner;
  private final JmDNSProcess jdp;

  /**
   * Creates new form Frame
   */
  public Frame(DataOwner dataOwner, JmDNSProcess jdp) {
    initComponents();
    this.dataOwner = dataOwner;
    this.jdp = jdp;
    this.setTitle(jdp.ID);
    DefaultListModel<NodeLine> modelServices = new DefaultListModel<>();
    listServices.setModel(modelServices);

    dataOwner.remoteSummaries.subscribe((Change<String, String> change) -> {
      //TODO Make efficient
      modelServices.clear();
      for (Entry<String, String> entry : dataOwner.remoteSummaries.get().entrySet()) {
        modelServices.addElement(new NodeLine(entry.getKey(), entry.getValue()));
      }
    });

    this.addWindowListener(new WindowListener() {
      @Override
      public void windowOpened(WindowEvent e) {
      }

      @Override
      public void windowClosing(WindowEvent e) {
        new Thread(() -> {
          try {
            Thread.sleep(5000);
          } catch (Throwable t) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, t);
          }
          Runtime.getRuntime().halt(1);
        }).start();
        jdp.shutdown();
      }

      @Override
      public void windowClosed(WindowEvent e) {
      }

      @Override
      public void windowIconified(WindowEvent e) {
      }

      @Override
      public void windowDeiconified(WindowEvent e) {
      }

      @Override
      public void windowActivated(WindowEvent e) {
      }

      @Override
      public void windowDeactivated(WindowEvent e) {
      }
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jSplitPane1 = new javax.swing.JSplitPane();
    jPanel1 = new javax.swing.JPanel();
    jScrollPane2 = new javax.swing.JScrollPane();
    taData = new javax.swing.JTextArea();
    jPanel2 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    listServices = new javax.swing.JList<>();
    jButton1 = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    taData.setColumns(20);
    taData.setRows(5);
    jScrollPane2.setViewportView(taData);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
        .addContainerGap())
    );

    jSplitPane1.setTopComponent(jPanel1);

    listServices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    listServices.setToolTipText("Double click to copy from highlighted node");
    listServices.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        listServicesMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(listServices);

    jButton1.setText("jButton1");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jButton1)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jButton1)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
        .addContainerGap())
    );

    jSplitPane1.setRightComponent(jPanel2);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane1)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane1)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void listServicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listServicesMouseClicked
    if (evt.getClickCount() >= 2) {
      pullFromNode();
    }
  }//GEN-LAST:event_listServicesMouseClicked

  private void pullFromNode() {
    NodeLine nl = listServices.getSelectedValue();
    if (nl != null) {
      try {
        String data = jdp.pullFromNode(nl.id);
        //System.out.println("rx data: " + data);
        data = data != null ? data : "ERROR";
        taData.setText(data);        
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(data), null);
      } catch (IOException ex) {
        Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        taData.setText("ERROR: " + ex.getMessage());
      }
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    final DataOwner dataOwner = new DataOwner();
    final JmDNSProcess jdp = JmDNSProcess.start(dataOwner);

    Thread t = new Thread(() -> {
      while (true) {
        try {
          dataOwner.localData.set((String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor));
        } catch (Throwable ex) {
          Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
          Thread.sleep(1000);
        } catch (InterruptedException ex) {
          Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
    });
    t.setDaemon(true);
    t.start();

//    /* Set the Nimbus look and feel */
//    
//    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//     */
//    try {
//      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//        if ("Nimbus".equals(info.getName())) {
//          javax.swing.UIManager.setLookAndFeel(info.getClassName());
//          break;
//        }
//      }
//    } catch (ClassNotFoundException ex) {
//      java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (InstantiationException ex) {
//      java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (IllegalAccessException ex) {
//      java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//      java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    }
//    //</editor-fold>
    
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new Frame(dataOwner, jdp).setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JList<NodeLine> listServices;
  private javax.swing.JTextArea taData;
  // End of variables declaration//GEN-END:variables
}
